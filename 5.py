# 5. Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из двух случайных слов,
# взятых из трёх списков:
#
# nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
# adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
# adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
#
#         Например:
#
# >>> get_jokes(2)
# ["лес завтра зеленый", "город вчера веселый"]
#
# Документировать код функции.

# Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы слов в шутках
# Не сможем - либо необходимо ограничить количество генерируемых шуток до количества слов в списках
# (когда каждое слово можно использовать только в одной шутке)?
# Сможете ли вы сделать аргументы именованными?
# да, необходимо fun(a=3), позиционные fun(a, b)


import random

def get_jokes(n):
    """Необходимо подать 'n' целое число в результате получим 'n' список шуток из трех слов"""

    if not(isinstance(n, int)):
        print("Подано не целое число")
        return None

    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
    my_dir = nouns, adverbs, adjectives
    return_value = list()

    for i in range(n):
        my_list = list()
        for j in range(len(my_dir)):
            random_word = random.randint(0, len(nouns)-1)
            my_list.append(my_dir[j][random_word])
        else:
            my_list = ' '.join(my_list)

        return_value.append(my_list)

    return return_value

print(get_jokes(4))
